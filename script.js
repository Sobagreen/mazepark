const INITIAL_LAYOUT = [
  ["–õ1", "–ü", "–ü", "–ü", "–©1", "–í1", "–©1", "–ó1", "–ü", "–ü"],
  ["–ü", "–ü", "–ó1", "–ü", "–ü", "–ü", "–ü", "–ü", "–ü", "–ü"],
  ["–ü", "–ü", "–ü", "–ó2", "–ü", "–ü", "–ü", "–ü", "–ü", "–ü"],
  ["–ó1", "–ü", "–ó2", "–ü", "–¢1", "–¢1", "–ü", "–ó1", "–ü", "–ó2"],
  ["–ó1", "–ü", "–ó2", "–ü", "–¢2", "–¢2", "–ü", "–ó1", "–ü", "–ó2"],
  ["–ü", "–ü", "–ü", "–ü", "–ü", "–ü", "–ó1", "–ü", "–ü", "–ü"],
  ["–ü", "–ü", "–ü", "–ü", "–ü", "–ü", "–ü", "–ó2", "–ü", "–ü"],
  ["–ü", "–ü", "–ó2", "–©2", "–í2", "–©2", "–ü", "–ü", "–ü", "–õ2"]
];

const TOKEN_MAP = {
  –ü: null,
  "–õ1": { type: "laser", player: "light", orientation: 1 },
  "–õ2": { type: "laser", player: "shadow", orientation: 3 },
  "–í1": { type: "volhv", player: "light", orientation: 2 },
  "–í2": { type: "volhv", player: "shadow", orientation: 0 },
  "–ó1": { type: "mirror", player: "light", orientation: 0 },
  "–ó2": { type: "mirror", player: "shadow", orientation: 2 },
  "–©1": { type: "shield", player: "light", orientation: 2 },
  "–©2": { type: "shield", player: "shadow", orientation: 0 },
  "–¢1": { type: "totem", player: "light", orientation: 0 },
  "–¢2": { type: "totem", player: "shadow", orientation: 2 }
};

const BOARD_HEIGHT = INITIAL_LAYOUT.length;
const BOARD_WIDTH = INITIAL_LAYOUT[0].length;
const FILES = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".slice(0, BOARD_WIDTH);
const THEME_STORAGE_KEY = "laser-theme";

const PLAYERS = {
  light: {
    name: "–î—Ä—É–∂–∏–Ω–∞ –ü–µ—Ä—É–Ω–∞",
    glyph: "‚òº",
    laserName: "–õ—É—á–µ–∑–∞—Ä –ü–µ—Ä—É–Ω–∞"
  },
  shadow: {
    name: "–ü–æ–ª–∫ –ß–µ—Ä–Ω–æ–±–æ–≥–∞",
    glyph: "‚òΩ",
    laserName: "–õ—É—á –ß–µ—Ä–Ω–æ–±–æ–≥–∞"
  }
};

const PIECE_DEFS = {
  laser: {
    name: "–õ—É—á–µ–∑–∞—Ä",
    glyph: "‚òº",
    canRotate: true,
    description: "–ò–∑–ª—É—á–∞–µ—Ç –ª—É—á. –ù–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è –∏ –Ω–µ—É—è–∑–≤–∏–º, –º–æ–∂–Ω–æ –ª–∏—à—å –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—É—á–∞.",
    movement: () => []
  },
  volhv: {
    name: "–í–æ–ª—Ö–≤",
    glyph: "‚úß",
    canRotate: false,
    description: "–ì–ª–∞–≤–Ω–∞—è —Ñ–∏–≥—É—Ä–∞. –•–æ–¥–∏—Ç –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –ø–æ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—è–º. –ü–æ–ø–∞–¥–∞–Ω–∏–µ –ª—É—á–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –ø–∞—Ä—Ç–∏—é.",
    movement: (board, x, y, piece) => orthogonalMoves(board, x, y, piece)
  },
  mirror: {
    name: "–ó–µ—Ä—Ü–∞–ª–æ",
    glyph: "‚ó©",
    canRotate: true,
    description: "–û–¥–∏–Ω –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π —Ñ–∞—Å. –û—Ç—Ä–∞–∂–∞–µ—Ç –ª—É—á –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º, —É—è–∑–≤–∏–º–æ —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
    movement: (board, x, y, piece) => diagonalMoves(board, x, y, piece)
  },
  shield: {
    name: "–©–∏—Ç–æ–Ω–æ—Å–µ—Ü",
    glyph: "üõ°",
    canRotate: true,
    description: "–©–∏—Ç –≥–∞—Å–∏—Ç –ª—É—á –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π. –° –±–æ–∫–æ–≤ –∏ —Ç—ã–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω.",
    movement: (board, x, y, piece) => orthogonalMoves(board, x, y, piece)
  },
  totem: {
    name: "–¢–æ—Ç–µ–º",
    glyph: "‚üÅ",
    canRotate: true,
    description: "–î–≤—É–ª–∏–∫–æ–µ –∑–µ—Ä–∫–∞–ª–æ. –û—Ç—Ä–∞–∂–∞–µ—Ç —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –º–æ–∂–µ—Ç —Å–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏ —Å –∑–µ—Ä—Ü–∞–ª–æ–º –∏–ª–∏ —â–∏—Ç–æ–º –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.",
    movement: (board, x, y, piece) => totemMoves(board, x, y, piece)
  }
};

const DIRECTIONS = [
  { dx: 0, dy: -1 }, // –≤–≤–µ—Ä—Ö
  { dx: 1, dy: 0 },  // –≤–ø—Ä–∞–≤–æ
  { dx: 0, dy: 1 },  // –≤–Ω–∏–∑
  { dx: -1, dy: 0 }  // –≤–ª–µ–≤–æ
];

const DIAGONALS = [
  { dx: 1, dy: -1 },
  { dx: 1, dy: 1 },
  { dx: -1, dy: -1 },
  { dx: -1, dy: 1 }
];

let board = createEmptyBoard();
let currentPlayer = "light";
let selectedCell = null;
let currentOptions = [];
let turnCounter = 1;
let currentTheme = "dark";

const elements = {
  board: document.getElementById("board"),
  status: document.getElementById("status"),
  turn: document.getElementById("turn-indicator"),
  rotateLeft: document.getElementById("rotate-left"),
  rotateRight: document.getElementById("rotate-right"),
  endgame: document.getElementById("endgame"),
  endgameTitle: document.getElementById("endgame-title"),
  endgameSubtitle: document.getElementById("endgame-subtitle"),
  playAgain: document.getElementById("play-again"),
  themeToggle: document.getElementById("theme-toggle"),
  laserOverlay: document.getElementById("laser-overlay"),
  pieceName: document.getElementById("piece-name"),
  pieceDetails: document.getElementById("piece-details")
};

const cells = [];

initialiseBoardGrid();
attachEventListeners();
initialiseTheme();
startNewGame();

function startNewGame() {
  board = createEmptyBoard();
  placeInitialPieces();
  currentPlayer = "light";
  turnCounter = 1;
  clearLaserPath();
  updateTurnIndicator();
  clearSelection({ silent: true });
  setStatus("–î—Ä—É–∂–∏–Ω–∞ –ü–µ—Ä—É–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥—É—ç–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –∏–ª–∏ –ø–æ–≤–µ—Ä–Ω–∏—Ç–µ –∑–µ—Ä–∫–∞–ª–æ.");
  elements.endgame.hidden = true;
  elements.endgame.setAttribute("aria-hidden", "true");
}

function createEmptyBoard() {
  return Array.from({ length: BOARD_HEIGHT }, () => Array(BOARD_WIDTH).fill(null));
}

function placeInitialPieces() {
  for (let y = 0; y < BOARD_HEIGHT; y++) {
    for (let x = 0; x < BOARD_WIDTH; x++) {
      const token = INITIAL_LAYOUT[y][x];
      const spec = TOKEN_MAP[token];
      if (spec) {
        board[y][x] = {
          type: spec.type,
          player: spec.player,
          orientation: spec.orientation % 4
        };
      }
    }
  }
}

function initialiseBoardGrid() {
  elements.board.innerHTML = "";
  elements.board.style.setProperty("--board-columns", BOARD_WIDTH);
  elements.board.style.setProperty("--board-rows", BOARD_HEIGHT);
  for (let y = 0; y < BOARD_HEIGHT; y++) {
    cells[y] = [];
    for (let x = 0; x < BOARD_WIDTH; x++) {
      const cell = document.createElement("button");
      cell.type = "button";
      cell.className = "cell";
      cell.dataset.x = x;
      cell.dataset.y = y;
      cell.setAttribute("role", "gridcell");
      cell.setAttribute("aria-label", `${FILES[x]}${BOARD_HEIGHT - y}`);
      elements.board.appendChild(cell);
      cell.addEventListener("click", () => handleCellInteraction(x, y));
      cells[y][x] = cell;
    }
  }
}

function attachEventListeners() {
  document.getElementById("new-game").addEventListener("click", startNewGame);
  elements.rotateLeft.addEventListener("click", () => rotateSelected(-1));
  elements.rotateRight.addEventListener("click", () => rotateSelected(1));
  elements.playAgain.addEventListener("click", startNewGame);
  if (elements.themeToggle) {
    elements.themeToggle.addEventListener("click", toggleTheme);
  }
}

function renderBoard() {
  for (let y = 0; y < BOARD_HEIGHT; y++) {
    for (let x = 0; x < BOARD_WIDTH; x++) {
      const cell = cells[y][x];
      const piece = board[y][x];
      cell.classList.toggle("cell--light", (x + y) % 2 === 0);
      cell.classList.toggle("cell--selected", selectedCell && selectedCell.x === x && selectedCell.y === y);
      cell.classList.remove("cell--option", "cell--swap");
      if (piece) {
        const def = PIECE_DEFS[piece.type];
        const wrapper = document.createElement("div");
        wrapper.className = `piece piece--${piece.player}`;
        const glyph = document.createElement("span");
        glyph.textContent = def.glyph;
        glyph.className = "piece__glyph";
        glyph.style.transform = `rotate(${piece.orientation * 90}deg)`;
        wrapper.appendChild(glyph);
        wrapper.setAttribute("aria-label", `${def.name} (${PLAYERS[piece.player].name})`);
        cell.replaceChildren(wrapper);
      } else {
        cell.replaceChildren();
      }
    }
  }
  for (const option of currentOptions) {
    const cell = cells[option.y][option.x];
    cell.classList.add("cell--option");
    if (option.swap) {
      cell.classList.add("cell--swap");
    }
  }
}

function handleCellInteraction(x, y) {
  if (elements.endgame.hidden === false) return;

  const piece = board[y][x];
  const current = selectedCell ? board[selectedCell.y][selectedCell.x] : null;
  const option = currentOptions.find((opt) => opt.x === x && opt.y === y);

  if (option && current) {
    executeMove(option, current, selectedCell);
    return;
  }

  if (piece && piece.player === currentPlayer) {
    selectCell(x, y);
  } else if (piece && piece.player !== currentPlayer) {
    setStatus(`${PLAYERS[currentPlayer].name}: –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–≥—É—Ä–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.`);
  } else {
    clearSelection();
  }
}

function selectCell(x, y) {
  selectedCell = { x, y };
  const piece = board[y][x];
  const def = PIECE_DEFS[piece.type];
  currentOptions = def.movement(board, x, y, piece);
  renderBoard();
  updateRotateControls(def.canRotate);
  const movesText = currentOptions.length
    ? `–î–æ—Å—Ç—É–ø–Ω–æ —Ö–æ–¥–æ–≤: ${currentOptions
        .map((opt) => `${toNotation(opt.x, opt.y)}${opt.swap ? "‚áÑ" : ""}`)
        .join(", ")}.`
    : def.canRotate
      ? "–ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É."
      : "–î–ª—è —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç.";
  setStatus(`${PLAYERS[currentPlayer].name}: ${def.name} –Ω–∞ ${toNotation(x, y)}. ${movesText}`);
  updatePiecePanel(piece, toNotation(x, y));
}

function clearSelection({ silent = false } = {}) {
  selectedCell = null;
  currentOptions = [];
  renderBoard();
  updateRotateControls(false);
  updatePiecePanel();
  if (!silent) {
    setStatus(`${PLAYERS[currentPlayer].name}: –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É.`);
  }
}

function updateRotateControls(enabled) {
  const piece = selectedCell ? board[selectedCell.y][selectedCell.x] : null;
  const canRotate = Boolean(enabled && piece && piece.player === currentPlayer);
  elements.rotateLeft.disabled = !canRotate;
  elements.rotateRight.disabled = !canRotate;
}

function executeMove(option, piece, from) {
  const targetPiece = board[option.y][option.x];

  if (option.swap) {
    if (!targetPiece) {
      return;
    }
    board[from.y][from.x] = targetPiece;
    board[option.y][option.x] = piece;
    setStatus(`${PLAYERS[currentPlayer].name}: ${PIECE_DEFS[piece.type].name} –º–µ–Ω—è–µ—Ç—Å—è –º–µ—Å—Ç–∞–º–∏ —Å ${PIECE_DEFS[targetPiece.type].name} –Ω–∞ ${toNotation(option.x, option.y)}.`);
    endTurn();
    return;
  }

  if (targetPiece) {
    setStatus(`${PLAYERS[currentPlayer].name}: –∫–ª–µ—Ç–∫–∞ ${toNotation(option.x, option.y)} —É–∂–µ –∑–∞–Ω—è—Ç–∞.`);
    renderBoard();
    return;
  }

  board[from.y][from.x] = null;
  board[option.y][option.x] = piece;
  setStatus(`${PLAYERS[currentPlayer].name}: ${PIECE_DEFS[piece.type].name} –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ ${toNotation(option.x, option.y)}.`);

  endTurn();
}

function rotateSelected(delta) {
  if (!selectedCell) return;
  const piece = board[selectedCell.y][selectedCell.x];
  const def = PIECE_DEFS[piece.type];
  if (!def.canRotate || piece.player !== currentPlayer) return;

  piece.orientation = mod4(piece.orientation + delta);
  renderBoard();
  const dirSymbol = delta > 0 ? "‚Üª" : "‚Ü∫";
  setStatus(`${PLAYERS[currentPlayer].name}: ${def.name} –Ω–∞ ${toNotation(selectedCell.x, selectedCell.y)} –ø–æ–≤—ë—Ä–Ω—É—Ç ${delta > 0 ? "–ø–æ" : "–ø—Ä–æ—Ç–∏–≤"} —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏.`);
  endTurn();
}

function endTurn() {
  clearSelection({ silent: true });
  const activePlayer = currentPlayer;
  const laserResult = fireLaser(activePlayer);
  renderBoard();
  highlightLaserPath(laserResult);
  if (laserResult.hit) {
    const hitPiece = laserResult.hit.piece;
    const owner = PLAYERS[hitPiece.player].name;
    const pieceName = PIECE_DEFS[hitPiece.type].name;
    const cell = toNotation(laserResult.hit.x, laserResult.hit.y);
    setStatus(`${laserResult.firer} –∏—Å–ø–µ–ø–µ–ª—è–µ—Ç ${pieceName} (${owner}) –Ω–∞ ${cell}.`);
    if (hitPiece.type === "volhv") {
      finishGame(activePlayer);
      return;
    }
  } else if (laserResult.blocked) {
    const blockPiece = laserResult.blocked.piece;
    const owner = PLAYERS[blockPiece.player].name;
    const cell = toNotation(laserResult.blocked.x, laserResult.blocked.y);
    setStatus(`${laserResult.firer} –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ ${PIECE_DEFS[blockPiece.type].name} –Ω–∞ ${cell}.`);
  }
  currentPlayer = activePlayer === "light" ? "shadow" : "light";
  turnCounter += 1;
  updateTurnIndicator();
  if (!laserResult.hit) {
    setStatus(`${PLAYERS[currentPlayer].name} –≥–æ—Ç–æ–≤–∏—Ç —Ö–æ–¥.`);
  }
}

function finishGame(winner) {
  const loser = winner === "light" ? "shadow" : "light";
  elements.endgame.hidden = false;
  elements.endgame.setAttribute("aria-hidden", "false");
  elements.endgameTitle.textContent = `${PLAYERS[winner].name} –ø–æ–±–µ–∂–¥–∞–µ—Ç!`;
  elements.endgameSubtitle.textContent = `–í–æ–ª—Ö–≤ ${PLAYERS[loser].name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª—É—á–æ–º.`;
  setStatus(`${PLAYERS[winner].name} –¥–æ–±–∏–ª–∏—Å—å –ø–æ–±–µ–¥—ã.`);
  updateRotateControls(false);
}

function fireLaser(player) {
  const emitterPos = findEmitter(player);
  if (!emitterPos) {
    return { path: [], firer: PLAYERS[player].laserName, origin: null };
  }

  let { x, y } = emitterPos;
  let direction = board[y][x].orientation % 4;
  const path = [];
  let previous = { x, y };

  while (true) {
    const nextX = x + DIRECTIONS[direction].dx;
    const nextY = y + DIRECTIONS[direction].dy;
    if (!inBounds(nextX, nextY)) {
      return {
        path,
        hit: null,
        firer: PLAYERS[player].laserName,
        origin: emitterPos,
        termination: computeExitPoint(previous, direction)
      };
    }

    x = nextX;
    y = nextY;
    path.push({ x, y });
    const target = board[y][x];
    if (!target) {
      previous = { x, y };
      continue;
    }
    const interaction = resolveLaserInteraction(target, direction);
    if (interaction.destroy) {
      board[y][x] = null;
    }
    if (interaction.stop) {
      const result = {
        path,
        hit: interaction.destroy ? { piece: target, x, y } : null,
        firer: PLAYERS[player].laserName,
        origin: emitterPos,
        termination: { x: x + 0.5, y: y + 0.5 }
      };
      if (!interaction.destroy) {
        result.blocked = { piece: target, x, y };
      }
      return result;
    }
    previous = { x, y };
    direction = interaction.nextDirection;
  }
}

function resolveLaserInteraction(piece, incomingDirection) {
  const face = mod4(incomingDirection + 2);
  switch (piece.type) {
    case "mirror":
      return mirrorInteraction(piece.orientation, face);
    case "totem":
      return totemInteraction(piece.orientation, face);
    case "shield":
      return shieldInteraction(piece.orientation, face);
    case "laser":
      return { destroy: false, stop: true };
    case "volhv":
      return { destroy: true, stop: true };
    default:
      return { destroy: true, stop: true };
  }
}

function mirrorInteraction(orientation, face) {
  const baseMap = {
    0: 1,
    1: 0
  };
  const rotatedMap = rotateFaceMap(baseMap, orientation);
  if (face in rotatedMap) {
    return { destroy: false, stop: false, nextDirection: rotatedMap[face] };
  }
  return { destroy: true, stop: true };
}

function totemInteraction(orientation, face) {
  const baseMap = {
    0: 1,
    1: 0,
    2: 3,
    3: 2
  };
  const rotatedMap = rotateFaceMap(baseMap, orientation);
  if (face in rotatedMap) {
    return { destroy: false, stop: false, nextDirection: rotatedMap[face] };
  }
  return { destroy: true, stop: true };
}

function shieldInteraction(orientation, face) {
  const shieldFace = orientation % 4;
  if (face === shieldFace) {
    return { destroy: false, stop: true };
  }
  return { destroy: true, stop: true };
}

function rotateFaceMap(map, orientation) {
  const rotated = {};
  for (const [face, outDir] of Object.entries(map)) {
    const newFace = mod4(Number(face) + orientation);
    const newOut = mod4(outDir + orientation);
    rotated[newFace] = newOut;
  }
  return rotated;
}

function findEmitter(player) {
  for (let y = 0; y < BOARD_HEIGHT; y++) {
    for (let x = 0; x < BOARD_WIDTH; x++) {
      const piece = board[y][x];
      if (piece && piece.player === player && piece.type === "laser") {
        return { x, y };
      }
    }
  }
  return null;
}

function highlightLaserPath(result) {
  clearLaserPath();
  if (!result || !result.origin) {
    return;
  }

  drawLaserBeam(result);
}

function clearLaserPath() {
  if (elements.laserOverlay) {
    elements.laserOverlay.replaceChildren();
  }
}

function drawLaserBeam(result) {
  if (!elements.laserOverlay) return;

  const points = [];
  points.push(toCellCenter(result.origin.x, result.origin.y));
  for (const step of result.path) {
    points.push(toCellCenter(step.x, step.y));
  }
  if (result.termination) {
    const lastPoint = points[points.length - 1];
    if (!lastPoint || Math.abs(lastPoint.x - result.termination.x) > 0.001 || Math.abs(lastPoint.y - result.termination.y) > 0.001) {
      points.push(result.termination);
    }
  }

  if (points.length < 2) {
    return;
  }

  for (let i = 0; i < points.length - 1; i += 1) {
    const start = points[i];
    const end = points[i + 1];
    const dx = end.x - start.x;
    const dy = end.y - start.y;
    const segment = document.createElement("div");
    segment.className = "laser-overlay__beam";
    segment.style.left = `${(start.x / BOARD_WIDTH) * 100}%`;
    segment.style.top = `${(start.y / BOARD_HEIGHT) * 100}%`;
    segment.style.width = `${(Math.hypot(dx, dy) / BOARD_WIDTH) * 100}%`;
    segment.style.transform = `translate(0, -50%) rotate(${Math.atan2(dy, dx)}rad)`;
    elements.laserOverlay.appendChild(segment);
  }

  if (result.hit || result.blocked) {
    const impact = result.hit || result.blocked;
    const marker = document.createElement("div");
    marker.className = "laser-overlay__impact";
    const center = toCellCenter(impact.x, impact.y);
    marker.style.left = `${(center.x / BOARD_WIDTH) * 100}%`;
    marker.style.top = `${(center.y / BOARD_HEIGHT) * 100}%`;
    elements.laserOverlay.appendChild(marker);
  }
}

function toCellCenter(x, y) {
  return { x: x + 0.5, y: y + 0.5 };
}

function computeExitPoint(previous, direction) {
  switch (direction % 4) {
    case 0:
      return { x: previous.x + 0.5, y: 0 };
    case 1:
      return { x: BOARD_WIDTH, y: previous.y + 0.5 };
    case 2:
      return { x: previous.x + 0.5, y: BOARD_HEIGHT };
    case 3:
    default:
      return { x: 0, y: previous.y + 0.5 };
  }
}

function orthogonalMoves(boardState, x, y, piece) {
  const moves = [];
  for (const dir of DIRECTIONS) {
    const nx = x + dir.dx;
    const ny = y + dir.dy;
    if (!inBounds(nx, ny)) continue;
    const target = boardState[ny][nx];
    if (!target) {
      moves.push({ x: nx, y: ny });
    }
  }
  return moves;
}

function diagonalMoves(boardState, x, y, piece) {
  const moves = [];
  for (const dir of DIAGONALS) {
    const nx = x + dir.dx;
    const ny = y + dir.dy;
    if (!inBounds(nx, ny)) continue;
    const target = boardState[ny][nx];
    if (!target) {
      moves.push({ x: nx, y: ny });
    }
  }
  return moves;
}

function totemMoves(boardState, x, y, piece) {
  const moves = [];
  for (const dir of DIRECTIONS) {
    const nx = x + dir.dx;
    const ny = y + dir.dy;
    if (!inBounds(nx, ny)) continue;
    const target = boardState[ny][nx];
    if (!target) {
      moves.push({ x: nx, y: ny });
    } else if (
      target.player === piece.player &&
      (target.type === "mirror" || target.type === "shield")
    ) {
      moves.push({ x: nx, y: ny, swap: true });
    }
  }
  return moves;
}

function inBounds(x, y) {
  return x >= 0 && x < BOARD_WIDTH && y >= 0 && y < BOARD_HEIGHT;
}

function mod4(value) {
  return (value % 4 + 4) % 4;
}

function toNotation(x, y) {
  return `${FILES[x]}${BOARD_HEIGHT - y}`;
}

function updateTurnIndicator() {
  elements.turn.textContent = `${turnCounter}. ${PLAYERS[currentPlayer].name}`;
}

function setStatus(message) {
  elements.status.textContent = message;
}

function initialiseTheme() {
  let theme = null;
  try {
    const stored = localStorage.getItem(THEME_STORAGE_KEY);
    if (stored === "light" || stored === "dark") {
      theme = stored;
    }
  } catch (err) {
    theme = null;
  }
  if (!theme && window.matchMedia) {
    theme = window.matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark";
  }
  setTheme(theme || "dark");
}

function toggleTheme() {
  const nextTheme = currentTheme === "light" ? "dark" : "light";
  setTheme(nextTheme);
}

function setTheme(theme) {
  currentTheme = theme === "light" ? "light" : "dark";
  document.body.classList.toggle("theme-light", currentTheme === "light");
  document.body.classList.toggle("theme-dark", currentTheme === "dark");
  document.documentElement.style.colorScheme = currentTheme === "light" ? "light" : "dark";
  if (elements.themeToggle) {
    const icon = currentTheme === "light" ? "‚òÄÔ∏è" : "üåô";
    elements.themeToggle.innerHTML = `<span aria-hidden="true">${icon}</span>`;
    elements.themeToggle.setAttribute("aria-pressed", currentTheme === "light" ? "true" : "false");
    elements.themeToggle.setAttribute("aria-label", `–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É. –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: ${currentTheme === "light" ? "—Å–≤–µ—Ç–ª–∞—è" : "—Ç—ë–º–Ω–∞—è"}.`);
    elements.themeToggle.setAttribute("title", currentTheme === "light" ? "–í–∫–ª—é—á–∏—Ç—å —Ç—ë–º–Ω—É—é —Ç–µ–º—É" : "–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É");
  }
  try {
    localStorage.setItem(THEME_STORAGE_KEY, currentTheme);
  } catch (err) {
    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
  }
}

function updatePiecePanel(piece = null, position = null) {
  if (!elements.pieceName || !elements.pieceDetails) return;
  if (!piece) {
    elements.pieceName.textContent = "‚Äî";
    elements.pieceDetails.textContent = "–ö–æ—Å–Ω–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ñ–∏–≥—É—Ä—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë —Å–≤–æ–π—Å—Ç–≤–∞.";
    return;
  }
  const def = PIECE_DEFS[piece.type];
  const owner = PLAYERS[piece.player].name;
  const facing = orientationToText(piece.orientation);
  elements.pieceName.textContent = `${def.name} ‚Ä¢ ${owner}`;
  const positionText = position ? `–ü–æ–∑–∏—Ü–∏—è ${position}. ` : "";
  elements.pieceDetails.textContent = `${positionText}${def.description} –ü–æ–≤–µ—Ä–Ω—É—Ç ${facing}.`;
}

function orientationToText(orientation) {
  switch (mod4(orientation)) {
    case 0:
      return "–∫ —Å–µ–≤–µ—Ä—É";
    case 1:
      return "–∫ –≤–æ—Å—Ç–æ–∫—É";
    case 2:
      return "–∫ —é–≥—É";
    case 3:
    default:
      return "–∫ –∑–∞–ø–∞–¥—É";
  }
}
